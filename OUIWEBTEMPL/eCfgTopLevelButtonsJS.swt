<!-- Template Start: eCfgTopLevelButtonsJS.swt -->
<!-- Oliver: [code redesign] -->

<script>

   function CfgGetLocalString (str)
   {
      //acquire handle to translatable string function
      var appObj = (window.opener != null) ? window.opener : this;

      //HI mode acccessor
      // YLAN PUI: PUI doesn't have top.App().GetLocalString() defined
      if (top.SWEIsHighInteract && typeof (top.App().GetLocalString) != "undefined")
      {
         var sString = top.App ().GetLocalString (str);
      }
      else
      {
         var sString = appObj._SWEgetMessage (str);
      }

      return sString;
   }

     var sCustomizeLabel = CfgGetLocalString ("IDS_CXP_UI_CUSTOMIZE");
     var sExplanationLabel = CfgGetLocalString ("IDS_CXP_UI_EXPLANATION");
     var sEditFieldLabel = CfgGetLocalString ("IDS_CXP_UI_EDITFIELD");
     var sRemoveLabel = CfgGetLocalString ("IDS_CXP_UI_REMOVE");

     m_UIFramework.m_preInvokeMethod ["DoneConfig"] = "CfgDoneConfig ()";

     function CfgDoneConfig ( )
     {
         var sWarning = CfgGetLocalString ("IDS_CXP_UI_INCOMPLETE_CONFIG");
         var i = 0;
 
         if (m_UIFramework.m_topRequireMoreChild == "Y" || m_UIFramework.m_missingReqAttrArray.length > 0)
         {
            if (m_UIFramework.m_missingReqAttrArray.length > 0)
            {
               sWarning += "\nPlease fill in these required attributes:";
               for (i = 0; i < m_UIFramework.m_missingReqAttrArray.length; i++)
               {
                  sWarning += "\n";
                  sWarning += m_UIFramework.m_missingReqAttrArray[i];
               }
            }

            if( confirm (sWarning))
            {
               m_UIFramework.m_topRequireMoreChild = "";
               m_UIFramework.m_bRequestLock = false;
                restoreFullScreen(); //Oliver
               return true;
            }
            else
            {
               m_UIFramework.m_bRequestLock = false;
               return false;
            }
         }
         else
         {
            m_UIFramework.m_bRequestLock = false;
            restoreFullScreen(); //Oliver
            return true;
         }
     }

      //Oliver: remove Cfg fullscreen mode
      function restoreFullScreen(){
          var frameObj = document.getElementById('_sweclient');
          frameObj.className = '';
      }
      // : Oliver

</script>

<span class="siebui-applet-button"><swe:control id="swe:EnableEngine" CfgUIControl="EnableEngine" CfgHtmlType="MiniButton" InvokeMethod="EnableEngine"/></span>
<span class="siebui-applet-button"><swe:control id="swe:CheckPrice" CfgUIControl="Check the price" CfgHtmlType="MiniButton" InvokeMethod="CalculatePriceCX"/></span>
<span class="siebui-applet-button"><swe:control id="swe:Save" CfgUIControl="Save" CfgHtmlType="MiniButton" InvokeMethod="SyncInstance"/></span>
<span class="siebui-applet-button"><swe:control id="swe:Cancel" CfgUIControl="Cancel" CfgHtmlType="MiniButton" InvokeMethod="PrevView"/></span>
<span class="siebui-applet-button"><swe:control id="swe:Interact" CfgUIControl="Interact" CfgHtmlType="MiniButton" InvokeMethod="InteractMultiSelect" /></span>
<span class="siebui-applet-button"><swe:control id="swe:Reset" CfgUIControl="Reset" CfgHtmlType="MiniButton" InvokeMethod="ResetMultiSelect" /></span>
<span class="siebui-applet-button"><swe:control id="swe:Done" CfgUIControl="sDone" CfgHtmlType="MiniButton" InvokeMethod="DoneConfig" /></span>
<span class="siebui-applet-button"><swe:control id="swe:FinishIt" CfgUIControl="FinishIt" CfgHtmlType="MiniButton" InvokeMethod="FinishIt"/></span>
<span class="siebui-applet-button"><swe:control id="swe:CheckErrors" CfgUIControl="lblCheckErrors" CfgHtmlType="MiniButton" InvokeMethod="ExternalValidate"/></span>

<!-- Template End: eCfgTopLevelButtonsJS.swt -->